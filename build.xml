<!--
/*
 * patchanim - Bezier Blend Batch Animation Builder
 * Copyright (C) 2008-2019 Dave Brosius
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 -->

<project name="patchanim" default="info">
	
	<property file="build.properties"/>
	<property file="version.properties"/>
	
	<property name="src.dir" value="${basedir}/src"/>
	<property name="target.dir" value="${basedir}/target"/>
	<property name="classes.dir" value="${target.dir}/classes"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="etc.dir" value="${basedir}/etc"/>
	<property name="htdocs.dir" value="${target.dir}/htdocs"/>
	<property name="jnlp.dir" value="${htdocs.dir}/jnlp"/>
	<property name="javadoc.dir" value="${htdocs.dir}/javadoc"/>
	<property name="javac.source" value="1.7"/>
	<property name="javac.target" value="1.7"/>
	<property name="javac.deprecation" value="on"/>
	<property name="javac.debug" value="on"/>
	
	<property name="patchanim.version" value="1.3.0"/>
	
	<target name="clean" description="removes all generated collateral">
		<delete dir="${target.dir}"/>
	</target>
	
	<path id="patchanim.classpath">
		<pathelement location="${lib.dir}/xml-apis-${xml-apis.version}.jar"/>
		<pathelement location="${lib.dir}/xalan-${xalan.version}.jar"/>
		<pathelement location="${lib.dir}/xercesImpl-${xercesImpl.version}.jar"/>
		<pathelement location="${lib.dir}/serializer-${serializer.version}.jar"/>
	</path>
	
    <target name="info">
        <echo message="PatchAnim - a bezier patch animation tool for generating images"/>
        <echo message=""/>
        <echo message="    this project uses yank (https://github.com/mebigfatguy/yank) for dependency management"/>
        <echo message="    download yank.jar and place in ant/lib directory"/>
        <echo message="    http://search.maven.org/#artifactdetails%7Ccom.mebigfatguy.yank%7Cyank%7C0.4.2%7Cjar"/>
    </target>
    
   <target name="yank" unless="no.yank" description="pulls down required artifacts from maven" xmlns:yank="antlib:com.mebigfatguy.yank">
        <mkdir dir="${lib.dir}"/>
        <yank:yank yankFile="${basedir}/yank.xls" destination="${lib.dir}" source="true" separateClassifierTypes="true">
            <server url="http://jcenter.bintray.com"/>
            <generateVersions propertyFileName="${basedir}/version.properties" />
        </yank:yank>
    </target>
	
	<target name="-init" depends="yank" description="prepares repository for a build">
		<mkdir dir="${lib.dir}"/>
		<mkdir dir="${target.dir}"/>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${javadoc.dir}"/>
	</target>
	
	<target name="xml-apis-check">
        <available file="${basedir}/lib/xml-apis-${xml-apis.version}.jar" property="xml-apis-exists"/>
    </target>

	<target name="xalan-check">
        <available file="${basedir}/lib/xalan-${xalan.version}.jar" property="xalan-exists"/>
    </target>

	<target name="serializer-check">
        <available file="${basedir}/lib/serializer-${serializer.version}.jar" property="serializer-exists"/>
    </target>

	<target name="xercesImpl-check">
        <available file="${basedir}/lib/xercesImpl-${xercesImpl.version}.jar" property="xercesImpl-exists"/>
    </target>

		<target name="install-xml-apis" depends="xml-apis-check" unless="xml-apis-exists" description="installs xml-apis.jar into lib">
        <get src="${xml-apis-url}" dest="${basedir}/lib/xml-apis-${xml-apis.version}.jar" verbose="true" ignoreerrors="true"/>
    </target>
	
    <target name="install-xalan" depends="xalan-check" unless="xalan-exists" description="installs xalan.jar into lib">
        <get src="${xalan-url}" dest="${basedir}/lib/xalan-${xalan.version}.jar" verbose="true" ignoreerrors="true"/>
    </target>

    <target name="install-serializer" depends="serializer-check" unless="serializer-exists" description="installs serializer.jar into lib">
        <get src="${serializer-url}" dest="${basedir}/lib/serializer-${serializer.version}.jar" verbose="true" ignoreerrors="true"/>
    </target>
        	
    <target name="install-xercesImpl" depends="xercesImpl-check" unless="xercesImpl-exists" description="installs xercesImpl.jar into lib">
        <get src="${xercesImpl-url}" dest="${basedir}/lib/xercesImpl-${xercesImpl.version}.jar" verbose="true" ignoreerrors="true"/>
    </target>

    <target name="pull" depends="install-xml-apis, install-xalan, install-serializer, install-xercesImpl" description="pull 3rdparty jars to the lib directory"/>

		<target name="compile" depends="-init, pull" description="compiles java files">
		<javac srcdir="${src.dir}"
				destdir="${classes.dir}"
				source="${javac.source}"
				target="${javac.target}"
				deprecation="${javac.deprecation}"
				debug="${javac.debug}"
			    includeantruntime="false">
			<classpath refid="patchanim.classpath"/>
		</javac>
	</target>
	
	<target name="resources" depends="-init" description="copies required files">
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.gif"/>
				<include name="**/*.xsd"/>
				<include name="**/*.xsl"/>
				<include name="**/*.jpg"/>
			</fileset>
		</copy>
		<echo message="${patchanim.version}" file="${classes.dir}/com/mebigfatguy/patchanim/io/Version.txt"/>
		<copy todir="${jnlp.dir}">
			<fileset dir="${etc.dir}">
				<include name="*.jnlp"/>
			</fileset>
		</copy>
		<copy todir="${htdocs.dir}">
			<fileset dir="${etc.dir}/htdocs">
			    <include name="*"/>
			</fileset>
		</copy>
		<replaceregexp byline="true">
  			<regexp pattern="\$VERSION"/>
  			<substitution expression="${patchanim.version}"/>
  			<fileset dir="${jnlp.dir}">
   				<include name="*.jnlp"/>
  			</fileset>
 		</replaceregexp>
	</target>
	
	<target name="jar" depends="compile, resources" description="produces the patchanim jar file">
		<jar destfile="${jnlp.dir}/patchanim-${patchanim.version}.jar">
			<fileset dir="${classes.dir}">
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
				<include name="**/*.gif"/>
				<include name="**/*.xsd"/>
				<include name="**/*.xsl"/>
				<include name="**/*.txt"/>
				<include name="**/*.jpg"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="license.txt"/>
			</fileset>
			<manifest>
				<attribute name="patchanim-version" value="${patchanim.version}"/>
				<attribute name="Main-Class" value="com.mebigfatguy.patchanim.main.PatchMain"/>
				<attribute name="Class-Path" value="xml-apis-${xml-apis.version}.jar xalan-${xalan.version}.jar xercesImpl-${xercesImpl.version}.jar serializer-${serializer-version}.jar"/>
			</manifest>
		</jar>	
	</target>
	
	<target name="srcjar" description="builds the source distribution jar file">
		<zip destfile="${basedir}/patchanim-src-${patchanim.version}-source.jar" 
			 basedir="${basedir}"
			 includes="src/**/*.java, src/**/*.properties, src/**/*.gif, src/**/*.xsd, src/**/*.xsl, lib/**/*.jar, *.txt"/>
	</target>
	
	<target name="javadoc" depends="-init" description="build the javadoc for the project">
		<javadoc packagenames="com.mebigfatguy.*"
				 sourcepath="${src.dir}"
				 classpathref="patchanim.classpath"
				 destdir="${javadoc.dir}"
				 windowtitle="patchanim api">
		    <doctitle><![CDATA[<h1>patchanim javadoc</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; 2008-2019 MeBigFatGuy.com. All Rights Reserved.</i>]]></bottom>
		</javadoc>
	</target>
	
	<target name="test" depends="-init, compile, resources" description="runs unit tests">
		<path id="patchanimtest.classpath">
			<pathelement location="${classes.dir}"/>
		</path>
        <junit
            printsummary="true"
            haltonfailure="true"
            haltonerror="true"
            showoutput="true"
            fork="true">

            <classpath><path refid="patchanimtest.classpath"/></classpath>
            <batchtest fork="true">
                <fileset dir="${classes.dir}"
                	excludes="test/*$*"
                    includes="test/*"/>
            </batchtest>
        </junit>
	</target>
	
	<target name="build" depends="clean, -init, compile, resources, test, jar" description="builds the patchanim jar"/>
	
	<target name="jnlp" description="copy jars to jnlp directory">
		<copy todir="${jnlp.dir}">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<input message="Enter keystore password" addproperty="pass"/>
		<signjar keystore="patchanim.store" 
		         alias="patchanim"
		         keypass="${pass}"
		         storepass="${pass}">
		    <fileset dir="${jnlp.dir}">
				<include name="*.jar"/>
			</fileset>
		</signjar>
	</target>
	
	<target name="binzip" depends="build" description="zips up all jars">
		<zip destfile="${basedir}/patchanim-bin-${patchanim.version}.zip" 
			 basedir="${jnlp.dir}"
			 includes="patchanim-${patchanim.version}.jar xml-apis-${xml-apis.version}.jar xercesImpl-${xercesImpl.version}.jar xalan-${xalan.version}.jar serializer-${serializer-version}.jar"/>
	</target>
	
	<target name="release" depends="build, jnlp, binzip, srcjar, javadoc" description="prepares everything for a release"/>

</project>
